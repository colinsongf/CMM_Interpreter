词法分析结果如下：
   1: int main(int argc,char *argv[])
       1:保留字: int
       1:标识符, 名字为： main
       1:限界符: (
       1:保留字: int
       1:标识符, 名字为： argc
       1:限界符: ,
       1:标识符, 名字为： char
       1:运算符: *
       1:标识符, 名字为： argv
       1:限界符: [
       1:限界符: ]
       1:限界符: )
   2: {
       2:限界符: {
   3:     int i=5;
       3:保留字: int
       3:标识符, 名字为： i
       3:运算符: =
       3:整数, 值为： 5
       3:限界符: ;
   4:     int sum=0;  //这是单行注释
       4:保留字: int
       4:标识符, 名字为： sum
       4:运算符: =
       4:整数, 值为： 0
       4:限界符: ;
   5:     if(i>0) {
       5:保留字: if
       5:限界符: (
       5:标识符, 名字为： i
       5:运算符: >
       5:整数, 值为： 0
       5:限界符: )
       5:限界符: {
   6:         sum+=i;
       6:标识符, 名字为： sum
       6:运算符: +=
       6:标识符, 名字为： i
       6:限界符: ;
   7:         i--;
       7:标识符, 名字为： i
       7:运算符: --
       7:限界符: ;
   8:     }
       8:限界符: }
   9:     real j=100.5;
       9:保留字: real
       9:标识符, 名字为： j
       9:运算符: =
       9:实数, 值为： 100.5
       9:限界符: ;
  10:     real 50d;   //这会出错
      10:保留字: real
      10:错误,无法识别token: 50d
      10:限界符: ;
  11:     /*
  12:     这是多行
  13:     注释
  14:     */
  15:     int array[] = {1,2,3,4};
      15:保留字: int
      15:标识符, 名字为： array
      15:限界符: [
      15:限界符: ]
      15:运算符: =
      15:限界符: {
      15:整数, 值为： 1
      15:限界符: ,
      15:整数, 值为： 2
      15:限界符: ,
      15:整数, 值为： 3
      15:限界符: ,
      15:整数, 值为： 4
      15:限界符: }
      15:限界符: ;
  16:     write(sum);
      16:保留字: write
      16:限界符: (
      16:标识符, 名字为： sum
      16:限界符: )
      16:限界符: ;
  17: }
      17:限界符: }
