————————————————————————文法非终结符如下——————————————————————————
<for循环>
<for循环块>
<while循环>
<while循环块>
<一元表达式>
<函数块>
<函数块闭包>
<函数定义或声明>
<函数定义或声明闭包>
<函数返回>
<前缀表达式>
<参数>
<参数列表>
<参数声明>
<参数闭包>
<变量>
<右值>
<后缀表达式>
<否则语句>
<因子>
<因式>
<因式递归>
<声明>
<声明语句>
<声明语句闭包>
<声明闭包>
<复合函数块>
<多个数据>
<字符串>
<数字>
<数字闭包>
<数组下标>
<条件语句>
<条件语句块>
<标识符>
<程序>
<类型>
<自增减运算符>
<表达式>
<赋值函数>
<赋值或函数调用>
<赋初值>
<逻辑表达式>
<逻辑运算符>
<项>



————————————————————————文法终结符如下————————————————————————
#
$
%
%=
(
)
*
*=
+
++
+=
,
-
--
-=
/
/=
;
<
<=
<>
=
==
>
>=
FLOAT_VALUE
ID
INT_VALUE
[
]
else
for
if
int
real
return
string
while
{
}



————————————————————————文法符号的first集如下————————————————————————
         # : {#}
         $ : {$}
         % : {%}
        %= : {%=}
         ( : {(}
         ) : {)}
         * : {*}
        *= : {*=}
         + : {+}
        ++ : {++}
        += : {+=}
         , : {,}
         - : {-}
        -- : {--}
        -= : {-=}
         / : {/}
        /= : {/=}
         ; : {;}
         < : {<}
        <= : {<=}
        <> : {<>}
<for循环> : {for}
<for循环块> : {(}
<while循环> : {while}
<while循环块> : {(}
<一元表达式> : {++,--,ID}
<函数块> : {$,++,--,ID,for,if,int,real,return,while}
<函数块闭包> : {$,++,--,ID,for,if,int,real,return,while}
<函数定义或声明> : {int,real}
<函数定义或声明闭包> : {;,{}
<函数返回> : {return}
<前缀表达式> : {++,--}
  <参数> : {FLOAT_VALUE,ID,INT_VALUE,string}
<参数列表> : {FLOAT_VALUE,ID,INT_VALUE,string}
<参数声明> : {$,int,real}
<参数闭包> : {$,,}
  <变量> : {ID}
  <右值> : {$,%,(,*,+,++,-,--,/,FLOAT_VALUE,ID,INT_VALUE,{}
<后缀表达式> : {ID}
<否则语句> : {$,else}
  <因子> : {$,%,(,*,/,FLOAT_VALUE,ID,INT_VALUE}
  <因式> : {$,(,FLOAT_VALUE,ID,INT_VALUE}
<因式递归> : {$,%,*,/}
  <声明> : {int,real}
<声明语句> : {int,real}
<声明语句闭包> : {$,int,real}
<声明闭包> : {$,,}
<复合函数块> : {{}
<多个数据> : {FLOAT_VALUE,INT_VALUE}
<字符串> : {string}
  <数字> : {FLOAT_VALUE,INT_VALUE}
<数字闭包> : {$,,}
<数组下标> : {$,[}
<条件语句> : {if}
<条件语句块> : {(}
<标识符> : {ID}
  <程序> : {$,int,real}
  <类型> : {int,real}
<自增减运算符> : {++,--}
<表达式> : {$,%,(,*,+,++,-,--,/,FLOAT_VALUE,ID,INT_VALUE}
<赋值函数> : {++,--,ID,int,real}
<赋值或函数调用> : {%=,(,*=,++,+=,--,-=,/=,=}
<赋初值> : {$,=}
<逻辑表达式> : {%,(,*,+,++,-,--,/,<,<=,<>,==,>,>=,FLOAT_VALUE,ID,INT_VALUE}
<逻辑运算符> : {<,<=,<>,==,>,>=}
     <项> : {$,+,-}
         = : {=}
        == : {==}
         > : {>}
        >= : {>=}
FLOAT_VALUE : {FLOAT_VALUE}
        ID : {ID}
 INT_VALUE : {INT_VALUE}
         [ : {[}
         ] : {]}
      else : {else}
       for : {for}
        if : {if}
       int : {int}
      real : {real}
    return : {return}
    string : {string}
     while : {while}
         { : {{}
         } : {}}



————————————————————————文法产生式的first集如下————————————————————————
<程序> -> <函数定义或声明> <程序> : {int,real}
       <程序> -> $ : {$}
<函数定义或声明> -> <类型> <变量> ( <参数声明> ) <函数定义或声明闭包> : {int,real}
<函数定义或声明闭包> -> <复合函数块> : {{}
<函数定义或声明闭包> -> ; : {;}
     <类型> -> int : {int}
    <类型> -> real : {real}
<变量> -> <标识符> <数组下标> : {ID}
   <标识符> -> ID : {ID}
<数组下标> -> [ <因式> ] : {[}
 <数组下标> -> $ : {$}
<因式> -> ( <表达式> ) : {(}
<因式> -> <变量> : {ID}
<因式> -> <数字> : {FLOAT_VALUE,INT_VALUE}
       <因式> -> $ : {$}
<数字> -> INT_VALUE : {INT_VALUE}
<数字> -> FLOAT_VALUE : {FLOAT_VALUE}
<表达式> -> <一元表达式> : {++,--,ID}
<表达式> -> <因子> <项> : {$,%,(,*,+,-,/,FLOAT_VALUE,ID,INT_VALUE}
<一元表达式> -> <前缀表达式> : {++,--}
<一元表达式> -> <后缀表达式> : {ID}
<前缀表达式> -> <自增减运算符> <变量> : {++,--}
<后缀表达式> -> <变量> <自增减运算符> : {ID}
<自增减运算符> -> ++ : {++}
<自增减运算符> -> -- : {--}
<因子> -> <因式> <因式递归> : {$,%,(,*,/,FLOAT_VALUE,ID,INT_VALUE}
<因式递归> -> * <因式> <因式递归> : {*}
<因式递归> -> / <因式> <因式递归> : {/}
<因式递归> -> % <因式> <因式递归> : {%}
 <因式递归> -> $ : {$}
<项> -> + <因子> <项> : {+}
<项> -> - <因子> <项> : {-}
          <项> -> $ : {$}
<参数声明> -> <声明> <声明闭包> : {int,real}
 <参数声明> -> $ : {$}
<声明> -> <类型> <变量> <赋初值> : {int,real}
<赋初值> -> = <右值> : {=}
    <赋初值> -> $ : {$}
<右值> -> <表达式> : {$,%,(,*,+,++,-,--,/,FLOAT_VALUE,ID,INT_VALUE}
<右值> -> { <多个数据> } : {{}
<多个数据> -> <数字> <数字闭包> : {FLOAT_VALUE,INT_VALUE}
<数字闭包> -> , <数字> <数字闭包> : {,}
 <数字闭包> -> $ : {$}
<声明闭包> -> , <声明> <声明闭包> : {,}
 <声明闭包> -> $ : {$}
<复合函数块> -> { <函数块> } : {{}
<函数块> -> <声明语句闭包> <函数块闭包> : {$,++,--,ID,for,if,int,real,return,while}
<声明语句闭包> -> <声明语句> <声明语句闭包> : {int,real}
<声明语句闭包> -> $ : {$}
<声明语句> -> <声明> ; : {int,real}
<函数块闭包> -> <赋值函数> <函数块> : {++,--,ID,int,real}
<函数块闭包> -> <for循环> <函数块> : {for}
<函数块闭包> -> <while循环> <函数块> : {while}
<函数块闭包> -> <条件语句> <函数块> : {if}
<函数块闭包> -> <函数返回> <函数块> : {return}
<函数块闭包> -> $ : {$}
<赋值函数> -> <自增减运算符> <变量> ; : {++,--}
<赋值函数> -> <类型> <变量> <赋值或函数调用> : {int,real}
<赋值函数> -> <变量> <赋值或函数调用> : {ID}
<赋值或函数调用> -> <自增减运算符> ; : {++,--}
<赋值或函数调用> -> = <右值> ; : {=}
<赋值或函数调用> -> += <右值> ; : {+=}
<赋值或函数调用> -> -= <右值> ; : {-=}
<赋值或函数调用> -> *= <右值> ; : {*=}
<赋值或函数调用> -> /= <右值> ; : {/=}
<赋值或函数调用> -> %= <右值> ; : {%=}
<赋值或函数调用> -> ( <参数列表> ) ; : {(}
<参数列表> -> <参数> <参数闭包> : {FLOAT_VALUE,ID,INT_VALUE,string}
<参数闭包> -> , <参数> <参数闭包> : {,}
 <参数闭包> -> $ : {$}
<参数> -> <标识符> : {ID}
<参数> -> <数字> : {FLOAT_VALUE,INT_VALUE}
<参数> -> <字符串> : {string}
<字符串> -> string : {string}
<for循环> -> for <for循环块> : {for}
<for循环块> -> ( <赋值函数> <逻辑表达式> ; <一元表达式> ) <复合函数块> : {(}
<逻辑表达式> -> <表达式> <逻辑运算符> <表达式> : {%,(,*,+,++,-,--,/,<,<=,<>,==,>,>=,FLOAT_VALUE,ID,INT_VALUE}
<逻辑运算符> -> < : {<}
<逻辑运算符> -> <= : {<=}
<逻辑运算符> -> > : {>}
<逻辑运算符> -> >= : {>=}
<逻辑运算符> -> <> : {<>}
<逻辑运算符> -> == : {==}
<while循环> -> while <while循环块> : {while}
<while循环块> -> ( <逻辑表达式> ) <复合函数块> : {(}
<条件语句> -> if <条件语句块> : {if}
<条件语句块> -> ( <逻辑表达式> ) <复合函数块> <否则语句> : {(}
<否则语句> -> else <复合函数块> : {else}
 <否则语句> -> $ : {$}
<函数返回> -> return <因式> ; : {return}



————————————————————————非终结符的follow集如下————————————————————————
         <for循环> : {++,--,ID,for,if,int,real,return,while,}}
      <for循环块> : {++,--,ID,for,if,int,real,return,while,}}
       <while循环> : {++,--,ID,for,if,int,real,return,while,}}
    <while循环块> : {++,--,ID,for,if,int,real,return,while,}}
   <一元表达式> : {),,,;,<,<=,<>,==,>,>=}
         <函数块> : {}}
   <函数块闭包> : {}}
<函数定义或声明> : {#,int,real}
<函数定义或声明闭包> : {#,int,real}
      <函数返回> : {++,--,ID,for,if,int,real,return,while,}}
   <前缀表达式> : {),,,;,<,<=,<>,==,>,>=}
            <参数> : {),,}
      <参数列表> : {)}
      <参数声明> : {)}
      <参数闭包> : {)}
            <变量> : {%,%=,(,),*,*=,+,++,+=,,,-,--,-=,/,/=,;,<,<=,<>,=,==,>,>=,]}
            <右值> : {),,,;}
   <后缀表达式> : {),,,;,<,<=,<>,==,>,>=}
      <否则语句> : {++,--,ID,for,if,int,real,return,while,}}
            <因子> : {),+,,,-,;,<,<=,<>,==,>,>=}
            <因式> : {%,),*,+,,,-,/,;,<,<=,<>,==,>,>=,]}
      <因式递归> : {),+,,,-,;,<,<=,<>,==,>,>=}
            <声明> : {),,,;}
      <声明语句> : {++,--,ID,for,if,int,real,return,while,}}
<声明语句闭包> : {++,--,ID,for,if,int,real,return,while,}}
      <声明闭包> : {)}
   <复合函数块> : {#,++,--,ID,else,for,if,int,real,return,while,}}
      <多个数据> : {}}
         <字符串> : {),,}
            <数字> : {%,),*,+,,,-,/,;,<,<=,<>,==,>,>=,],}}
      <数字闭包> : {}}
      <数组下标> : {%,%=,(,),*,*=,+,++,+=,,,-,--,-=,/,/=,;,<,<=,<>,=,==,>,>=,]}
      <条件语句> : {++,--,ID,for,if,int,real,return,while,}}
   <条件语句块> : {++,--,ID,for,if,int,real,return,while,}}
         <标识符> : {%,%=,(,),*,*=,+,++,+=,,,-,--,-=,/,/=,;,<,<=,<>,=,==,>,>=,[,]}
            <程序> : {#}
            <类型> : {ID}
<自增减运算符> : {),,,;,<,<=,<>,==,>,>=,ID}
         <表达式> : {),,,;,<,<=,<>,==,>,>=}
      <赋值函数> : {%,(,*,+,++,-,--,/,<,<=,<>,==,>,>=,FLOAT_VALUE,ID,INT_VALUE,for,if,int,real,return,while,}}
<赋值或函数调用> : {%,(,*,+,++,-,--,/,<,<=,<>,==,>,>=,FLOAT_VALUE,ID,INT_VALUE,for,if,int,real,return,while,}}
         <赋初值> : {),,,;}
   <逻辑表达式> : {),;}
   <逻辑运算符> : {%,(,),*,+,++,-,--,/,;,FLOAT_VALUE,ID,INT_VALUE}
               <项> : {),,,;,<,<=,<>,==,>,>=}



————————————————————————产生式的select集如下————————————————————————
<程序> -> <函数定义或声明> <程序> : {int,real}
       <程序> -> $ : {#}
<函数定义或声明> -> <类型> <变量> ( <参数声明> ) <函数定义或声明闭包> : {int,real}
<函数定义或声明闭包> -> <复合函数块> : {{}
<函数定义或声明闭包> -> ; : {;}
     <类型> -> int : {int}
    <类型> -> real : {real}
<变量> -> <标识符> <数组下标> : {ID}
   <标识符> -> ID : {ID}
<数组下标> -> [ <因式> ] : {[}
 <数组下标> -> $ : {%,%=,(,),*,*=,+,++,+=,,,-,--,-=,/,/=,;,<,<=,<>,=,==,>,>=,]}
<因式> -> ( <表达式> ) : {(}
<因式> -> <变量> : {ID}
<因式> -> <数字> : {FLOAT_VALUE,INT_VALUE}
       <因式> -> $ : {%,),*,+,,,-,/,;,<,<=,<>,==,>,>=,]}
<数字> -> INT_VALUE : {INT_VALUE}
<数字> -> FLOAT_VALUE : {FLOAT_VALUE}
<表达式> -> <一元表达式> : {++,--,ID}
<表达式> -> <因子> <项> : {%,(,),*,+,,,-,/,;,<,<=,<>,==,>,>=,FLOAT_VALUE,ID,INT_VALUE}
<一元表达式> -> <前缀表达式> : {++,--}
<一元表达式> -> <后缀表达式> : {ID}
<前缀表达式> -> <自增减运算符> <变量> : {++,--}
<后缀表达式> -> <变量> <自增减运算符> : {ID}
<自增减运算符> -> ++ : {++}
<自增减运算符> -> -- : {--}
<因子> -> <因式> <因式递归> : {%,(,),*,+,,,-,/,;,<,<=,<>,==,>,>=,FLOAT_VALUE,ID,INT_VALUE}
<因式递归> -> * <因式> <因式递归> : {*}
<因式递归> -> / <因式> <因式递归> : {/}
<因式递归> -> % <因式> <因式递归> : {%}
 <因式递归> -> $ : {),+,,,-,;,<,<=,<>,==,>,>=}
<项> -> + <因子> <项> : {+}
<项> -> - <因子> <项> : {-}
          <项> -> $ : {),,,;,<,<=,<>,==,>,>=}
<参数声明> -> <声明> <声明闭包> : {int,real}
 <参数声明> -> $ : {)}
<声明> -> <类型> <变量> <赋初值> : {int,real}
<赋初值> -> = <右值> : {=}
    <赋初值> -> $ : {),,,;}
<右值> -> <表达式> : {%,(,),*,+,++,,,-,--,/,;,FLOAT_VALUE,ID,INT_VALUE}
<右值> -> { <多个数据> } : {{}
<多个数据> -> <数字> <数字闭包> : {FLOAT_VALUE,INT_VALUE}
<数字闭包> -> , <数字> <数字闭包> : {,}
 <数字闭包> -> $ : {}}
<声明闭包> -> , <声明> <声明闭包> : {,}
 <声明闭包> -> $ : {)}
<复合函数块> -> { <函数块> } : {{}
<函数块> -> <声明语句闭包> <函数块闭包> : {++,--,ID,for,if,int,real,return,while,}}
<声明语句闭包> -> <声明语句> <声明语句闭包> : {int,real}
<声明语句闭包> -> $ : {++,--,ID,for,if,int,real,return,while,}}
<声明语句> -> <声明> ; : {int,real}
<函数块闭包> -> <赋值函数> <函数块> : {++,--,ID,int,real}
<函数块闭包> -> <for循环> <函数块> : {for}
<函数块闭包> -> <while循环> <函数块> : {while}
<函数块闭包> -> <条件语句> <函数块> : {if}
<函数块闭包> -> <函数返回> <函数块> : {return}
<函数块闭包> -> $ : {}}
<赋值函数> -> <自增减运算符> <变量> ; : {++,--}
<赋值函数> -> <类型> <变量> <赋值或函数调用> : {int,real}
<赋值函数> -> <变量> <赋值或函数调用> : {ID}
<赋值或函数调用> -> <自增减运算符> ; : {++,--}
<赋值或函数调用> -> = <右值> ; : {=}
<赋值或函数调用> -> += <右值> ; : {+=}
<赋值或函数调用> -> -= <右值> ; : {-=}
<赋值或函数调用> -> *= <右值> ; : {*=}
<赋值或函数调用> -> /= <右值> ; : {/=}
<赋值或函数调用> -> %= <右值> ; : {%=}
<赋值或函数调用> -> ( <参数列表> ) ; : {(}
<参数列表> -> <参数> <参数闭包> : {FLOAT_VALUE,ID,INT_VALUE,string}
<参数闭包> -> , <参数> <参数闭包> : {,}
 <参数闭包> -> $ : {)}
<参数> -> <标识符> : {ID}
<参数> -> <数字> : {FLOAT_VALUE,INT_VALUE}
<参数> -> <字符串> : {string}
<字符串> -> string : {string}
<for循环> -> for <for循环块> : {for}
<for循环块> -> ( <赋值函数> <逻辑表达式> ; <一元表达式> ) <复合函数块> : {(}
<逻辑表达式> -> <表达式> <逻辑运算符> <表达式> : {%,(,*,+,++,-,--,/,<,<=,<>,==,>,>=,FLOAT_VALUE,ID,INT_VALUE}
<逻辑运算符> -> < : {<}
<逻辑运算符> -> <= : {<=}
<逻辑运算符> -> > : {>}
<逻辑运算符> -> >= : {>=}
<逻辑运算符> -> <> : {<>}
<逻辑运算符> -> == : {==}
<while循环> -> while <while循环块> : {while}
<while循环块> -> ( <逻辑表达式> ) <复合函数块> : {(}
<条件语句> -> if <条件语句块> : {if}
<条件语句块> -> ( <逻辑表达式> ) <复合函数块> <否则语句> : {(}
<否则语句> -> else <复合函数块> : {else}
 <否则语句> -> $ : {++,--,ID,for,if,int,real,return,while,}}
<函数返回> -> return <因式> ; : {return}



————————————————————————预测分析表如下————————————————————————
<for循环> 遇到了 for,采用产生式:<for循环> -> for <for循环块>
<for循环块> 遇到了 (,采用产生式:<for循环块> -> ( <赋值函数> <逻辑表达式> ; <一元表达式> ) <复合函数块>
<while循环> 遇到了 while,采用产生式:<while循环> -> while <while循环块>
<while循环块> 遇到了 (,采用产生式:<while循环块> -> ( <逻辑表达式> ) <复合函数块>
<一元表达式> 遇到了 ++,采用产生式:<一元表达式> -> <前缀表达式>
<一元表达式> 遇到了 --,采用产生式:<一元表达式> -> <前缀表达式>
<一元表达式> 遇到了 ID,采用产生式:<一元表达式> -> <后缀表达式>
<函数块> 遇到了 ++,采用产生式:<函数块> -> <声明语句闭包> <函数块闭包>
<函数块> 遇到了 --,采用产生式:<函数块> -> <声明语句闭包> <函数块闭包>
<函数块> 遇到了 ID,采用产生式:<函数块> -> <声明语句闭包> <函数块闭包>
<函数块> 遇到了 for,采用产生式:<函数块> -> <声明语句闭包> <函数块闭包>
<函数块> 遇到了 if,采用产生式:<函数块> -> <声明语句闭包> <函数块闭包>
<函数块> 遇到了 int,采用产生式:<函数块> -> <声明语句闭包> <函数块闭包>
<函数块> 遇到了 real,采用产生式:<函数块> -> <声明语句闭包> <函数块闭包>
<函数块> 遇到了 return,采用产生式:<函数块> -> <声明语句闭包> <函数块闭包>
<函数块> 遇到了 while,采用产生式:<函数块> -> <声明语句闭包> <函数块闭包>
<函数块> 遇到了 },采用产生式:<函数块> -> <声明语句闭包> <函数块闭包>
<函数块闭包> 遇到了 ++,采用产生式:<函数块闭包> -> <赋值函数> <函数块>
<函数块闭包> 遇到了 --,采用产生式:<函数块闭包> -> <赋值函数> <函数块>
<函数块闭包> 遇到了 ID,采用产生式:<函数块闭包> -> <赋值函数> <函数块>
<函数块闭包> 遇到了 for,采用产生式:<函数块闭包> -> <for循环> <函数块>
<函数块闭包> 遇到了 if,采用产生式:<函数块闭包> -> <条件语句> <函数块>
<函数块闭包> 遇到了 int,采用产生式:<函数块闭包> -> <赋值函数> <函数块>
<函数块闭包> 遇到了 real,采用产生式:<函数块闭包> -> <赋值函数> <函数块>
<函数块闭包> 遇到了 return,采用产生式:<函数块闭包> -> <函数返回> <函数块>
<函数块闭包> 遇到了 while,采用产生式:<函数块闭包> -> <while循环> <函数块>
<函数块闭包> 遇到了 },采用产生式:<函数块闭包> -> $
<函数定义或声明> 遇到了 int,采用产生式:<函数定义或声明> -> <类型> <变量> ( <参数声明> ) <函数定义或声明闭包>
<函数定义或声明> 遇到了 real,采用产生式:<函数定义或声明> -> <类型> <变量> ( <参数声明> ) <函数定义或声明闭包>
<函数定义或声明闭包> 遇到了 ;,采用产生式:<函数定义或声明闭包> -> ;
<函数定义或声明闭包> 遇到了 {,采用产生式:<函数定义或声明闭包> -> <复合函数块>
<函数返回> 遇到了 return,采用产生式:<函数返回> -> return <因式> ;
<前缀表达式> 遇到了 ++,采用产生式:<前缀表达式> -> <自增减运算符> <变量>
<前缀表达式> 遇到了 --,采用产生式:<前缀表达式> -> <自增减运算符> <变量>
<参数> 遇到了 FLOAT_VALUE,采用产生式:<参数> -> <数字>
<参数> 遇到了 ID,采用产生式:<参数> -> <标识符>
<参数> 遇到了 INT_VALUE,采用产生式:<参数> -> <数字>
<参数> 遇到了 string,采用产生式:<参数> -> <字符串>
<参数列表> 遇到了 FLOAT_VALUE,采用产生式:<参数列表> -> <参数> <参数闭包>
<参数列表> 遇到了 ID,采用产生式:<参数列表> -> <参数> <参数闭包>
<参数列表> 遇到了 INT_VALUE,采用产生式:<参数列表> -> <参数> <参数闭包>
<参数列表> 遇到了 string,采用产生式:<参数列表> -> <参数> <参数闭包>
<参数声明> 遇到了 ),采用产生式:<参数声明> -> $
<参数声明> 遇到了 int,采用产生式:<参数声明> -> <声明> <声明闭包>
<参数声明> 遇到了 real,采用产生式:<参数声明> -> <声明> <声明闭包>
<参数闭包> 遇到了 ),采用产生式:<参数闭包> -> $
<参数闭包> 遇到了 ,,采用产生式:<参数闭包> -> , <参数> <参数闭包>
<变量> 遇到了 ID,采用产生式:<变量> -> <标识符> <数组下标>
<右值> 遇到了 %,采用产生式:<右值> -> <表达式>
<右值> 遇到了 (,采用产生式:<右值> -> <表达式>
<右值> 遇到了 ),采用产生式:<右值> -> <表达式>
<右值> 遇到了 *,采用产生式:<右值> -> <表达式>
<右值> 遇到了 +,采用产生式:<右值> -> <表达式>
<右值> 遇到了 ++,采用产生式:<右值> -> <表达式>
<右值> 遇到了 ,,采用产生式:<右值> -> <表达式>
<右值> 遇到了 -,采用产生式:<右值> -> <表达式>
<右值> 遇到了 --,采用产生式:<右值> -> <表达式>
<右值> 遇到了 /,采用产生式:<右值> -> <表达式>
<右值> 遇到了 ;,采用产生式:<右值> -> <表达式>
<右值> 遇到了 FLOAT_VALUE,采用产生式:<右值> -> <表达式>
<右值> 遇到了 ID,采用产生式:<右值> -> <表达式>
<右值> 遇到了 INT_VALUE,采用产生式:<右值> -> <表达式>
<右值> 遇到了 {,采用产生式:<右值> -> { <多个数据> }
<后缀表达式> 遇到了 ID,采用产生式:<后缀表达式> -> <变量> <自增减运算符>
<否则语句> 遇到了 ++,采用产生式:<否则语句> -> $
<否则语句> 遇到了 --,采用产生式:<否则语句> -> $
<否则语句> 遇到了 ID,采用产生式:<否则语句> -> $
<否则语句> 遇到了 else,采用产生式:<否则语句> -> else <复合函数块>
<否则语句> 遇到了 for,采用产生式:<否则语句> -> $
<否则语句> 遇到了 if,采用产生式:<否则语句> -> $
<否则语句> 遇到了 int,采用产生式:<否则语句> -> $
<否则语句> 遇到了 real,采用产生式:<否则语句> -> $
<否则语句> 遇到了 return,采用产生式:<否则语句> -> $
<否则语句> 遇到了 while,采用产生式:<否则语句> -> $
<否则语句> 遇到了 },采用产生式:<否则语句> -> $
<因子> 遇到了 %,采用产生式:<因子> -> <因式> <因式递归>
<因子> 遇到了 (,采用产生式:<因子> -> <因式> <因式递归>
<因子> 遇到了 ),采用产生式:<因子> -> <因式> <因式递归>
<因子> 遇到了 *,采用产生式:<因子> -> <因式> <因式递归>
<因子> 遇到了 +,采用产生式:<因子> -> <因式> <因式递归>
<因子> 遇到了 ,,采用产生式:<因子> -> <因式> <因式递归>
<因子> 遇到了 -,采用产生式:<因子> -> <因式> <因式递归>
<因子> 遇到了 /,采用产生式:<因子> -> <因式> <因式递归>
<因子> 遇到了 ;,采用产生式:<因子> -> <因式> <因式递归>
<因子> 遇到了 <,采用产生式:<因子> -> <因式> <因式递归>
<因子> 遇到了 <=,采用产生式:<因子> -> <因式> <因式递归>
<因子> 遇到了 <>,采用产生式:<因子> -> <因式> <因式递归>
<因子> 遇到了 ==,采用产生式:<因子> -> <因式> <因式递归>
<因子> 遇到了 >,采用产生式:<因子> -> <因式> <因式递归>
<因子> 遇到了 >=,采用产生式:<因子> -> <因式> <因式递归>
<因子> 遇到了 FLOAT_VALUE,采用产生式:<因子> -> <因式> <因式递归>
<因子> 遇到了 ID,采用产生式:<因子> -> <因式> <因式递归>
<因子> 遇到了 INT_VALUE,采用产生式:<因子> -> <因式> <因式递归>
<因式> 遇到了 %,采用产生式:<因式> -> $
<因式> 遇到了 (,采用产生式:<因式> -> ( <表达式> )
<因式> 遇到了 ),采用产生式:<因式> -> $
<因式> 遇到了 *,采用产生式:<因式> -> $
<因式> 遇到了 +,采用产生式:<因式> -> $
<因式> 遇到了 ,,采用产生式:<因式> -> $
<因式> 遇到了 -,采用产生式:<因式> -> $
<因式> 遇到了 /,采用产生式:<因式> -> $
<因式> 遇到了 ;,采用产生式:<因式> -> $
<因式> 遇到了 <,采用产生式:<因式> -> $
<因式> 遇到了 <=,采用产生式:<因式> -> $
<因式> 遇到了 <>,采用产生式:<因式> -> $
<因式> 遇到了 ==,采用产生式:<因式> -> $
<因式> 遇到了 >,采用产生式:<因式> -> $
<因式> 遇到了 >=,采用产生式:<因式> -> $
<因式> 遇到了 FLOAT_VALUE,采用产生式:<因式> -> <数字>
<因式> 遇到了 ID,采用产生式:<因式> -> <变量>
<因式> 遇到了 INT_VALUE,采用产生式:<因式> -> <数字>
<因式> 遇到了 ],采用产生式:<因式> -> $
<因式递归> 遇到了 %,采用产生式:<因式递归> -> % <因式> <因式递归>
<因式递归> 遇到了 ),采用产生式:<因式递归> -> $
<因式递归> 遇到了 *,采用产生式:<因式递归> -> * <因式> <因式递归>
<因式递归> 遇到了 +,采用产生式:<因式递归> -> $
<因式递归> 遇到了 ,,采用产生式:<因式递归> -> $
<因式递归> 遇到了 -,采用产生式:<因式递归> -> $
<因式递归> 遇到了 /,采用产生式:<因式递归> -> / <因式> <因式递归>
<因式递归> 遇到了 ;,采用产生式:<因式递归> -> $
<因式递归> 遇到了 <,采用产生式:<因式递归> -> $
<因式递归> 遇到了 <=,采用产生式:<因式递归> -> $
<因式递归> 遇到了 <>,采用产生式:<因式递归> -> $
<因式递归> 遇到了 ==,采用产生式:<因式递归> -> $
<因式递归> 遇到了 >,采用产生式:<因式递归> -> $
<因式递归> 遇到了 >=,采用产生式:<因式递归> -> $
<声明> 遇到了 int,采用产生式:<声明> -> <类型> <变量> <赋初值>
<声明> 遇到了 real,采用产生式:<声明> -> <类型> <变量> <赋初值>
<声明语句> 遇到了 int,采用产生式:<声明语句> -> <声明> ;
<声明语句> 遇到了 real,采用产生式:<声明语句> -> <声明> ;
<声明语句闭包> 遇到了 ++,采用产生式:<声明语句闭包> -> $
<声明语句闭包> 遇到了 --,采用产生式:<声明语句闭包> -> $
<声明语句闭包> 遇到了 ID,采用产生式:<声明语句闭包> -> $
<声明语句闭包> 遇到了 for,采用产生式:<声明语句闭包> -> $
<声明语句闭包> 遇到了 if,采用产生式:<声明语句闭包> -> $
<声明语句闭包> 遇到了 int,采用产生式:<声明语句闭包> -> $
<声明语句闭包> 遇到了 real,采用产生式:<声明语句闭包> -> $
<声明语句闭包> 遇到了 return,采用产生式:<声明语句闭包> -> $
<声明语句闭包> 遇到了 while,采用产生式:<声明语句闭包> -> $
<声明语句闭包> 遇到了 },采用产生式:<声明语句闭包> -> $
<声明闭包> 遇到了 ),采用产生式:<声明闭包> -> $
<声明闭包> 遇到了 ,,采用产生式:<声明闭包> -> , <声明> <声明闭包>
<复合函数块> 遇到了 {,采用产生式:<复合函数块> -> { <函数块> }
<多个数据> 遇到了 FLOAT_VALUE,采用产生式:<多个数据> -> <数字> <数字闭包>
<多个数据> 遇到了 INT_VALUE,采用产生式:<多个数据> -> <数字> <数字闭包>
<字符串> 遇到了 string,采用产生式:<字符串> -> string
<数字> 遇到了 FLOAT_VALUE,采用产生式:<数字> -> FLOAT_VALUE
<数字> 遇到了 INT_VALUE,采用产生式:<数字> -> INT_VALUE
<数字闭包> 遇到了 ,,采用产生式:<数字闭包> -> , <数字> <数字闭包>
<数字闭包> 遇到了 },采用产生式:<数字闭包> -> $
<数组下标> 遇到了 %,采用产生式:<数组下标> -> $
<数组下标> 遇到了 %=,采用产生式:<数组下标> -> $
<数组下标> 遇到了 (,采用产生式:<数组下标> -> $
<数组下标> 遇到了 ),采用产生式:<数组下标> -> $
<数组下标> 遇到了 *,采用产生式:<数组下标> -> $
<数组下标> 遇到了 *=,采用产生式:<数组下标> -> $
<数组下标> 遇到了 +,采用产生式:<数组下标> -> $
<数组下标> 遇到了 ++,采用产生式:<数组下标> -> $
<数组下标> 遇到了 +=,采用产生式:<数组下标> -> $
<数组下标> 遇到了 ,,采用产生式:<数组下标> -> $
<数组下标> 遇到了 -,采用产生式:<数组下标> -> $
<数组下标> 遇到了 --,采用产生式:<数组下标> -> $
<数组下标> 遇到了 -=,采用产生式:<数组下标> -> $
<数组下标> 遇到了 /,采用产生式:<数组下标> -> $
<数组下标> 遇到了 /=,采用产生式:<数组下标> -> $
<数组下标> 遇到了 ;,采用产生式:<数组下标> -> $
<数组下标> 遇到了 <,采用产生式:<数组下标> -> $
<数组下标> 遇到了 <=,采用产生式:<数组下标> -> $
<数组下标> 遇到了 <>,采用产生式:<数组下标> -> $
<数组下标> 遇到了 =,采用产生式:<数组下标> -> $
<数组下标> 遇到了 ==,采用产生式:<数组下标> -> $
<数组下标> 遇到了 >,采用产生式:<数组下标> -> $
<数组下标> 遇到了 >=,采用产生式:<数组下标> -> $
<数组下标> 遇到了 [,采用产生式:<数组下标> -> [ <因式> ]
<数组下标> 遇到了 ],采用产生式:<数组下标> -> $
<条件语句> 遇到了 if,采用产生式:<条件语句> -> if <条件语句块>
<条件语句块> 遇到了 (,采用产生式:<条件语句块> -> ( <逻辑表达式> ) <复合函数块> <否则语句>
<标识符> 遇到了 ID,采用产生式:<标识符> -> ID
<程序> 遇到了 #,采用产生式:<程序> -> $
<程序> 遇到了 int,采用产生式:<程序> -> <函数定义或声明> <程序>
<程序> 遇到了 real,采用产生式:<程序> -> <函数定义或声明> <程序>
<类型> 遇到了 int,采用产生式:<类型> -> int
<类型> 遇到了 real,采用产生式:<类型> -> real
<自增减运算符> 遇到了 ++,采用产生式:<自增减运算符> -> ++
<自增减运算符> 遇到了 --,采用产生式:<自增减运算符> -> --
<表达式> 遇到了 %,采用产生式:<表达式> -> <因子> <项>
<表达式> 遇到了 (,采用产生式:<表达式> -> <因子> <项>
<表达式> 遇到了 ),采用产生式:<表达式> -> <因子> <项>
<表达式> 遇到了 *,采用产生式:<表达式> -> <因子> <项>
<表达式> 遇到了 +,采用产生式:<表达式> -> <因子> <项>
<表达式> 遇到了 ++,采用产生式:<表达式> -> <一元表达式>
<表达式> 遇到了 ,,采用产生式:<表达式> -> <因子> <项>
<表达式> 遇到了 -,采用产生式:<表达式> -> <因子> <项>
<表达式> 遇到了 --,采用产生式:<表达式> -> <一元表达式>
<表达式> 遇到了 /,采用产生式:<表达式> -> <因子> <项>
<表达式> 遇到了 ;,采用产生式:<表达式> -> <因子> <项>
<表达式> 遇到了 <,采用产生式:<表达式> -> <因子> <项>
<表达式> 遇到了 <=,采用产生式:<表达式> -> <因子> <项>
<表达式> 遇到了 <>,采用产生式:<表达式> -> <因子> <项>
<表达式> 遇到了 ==,采用产生式:<表达式> -> <因子> <项>
<表达式> 遇到了 >,采用产生式:<表达式> -> <因子> <项>
<表达式> 遇到了 >=,采用产生式:<表达式> -> <因子> <项>
<表达式> 遇到了 FLOAT_VALUE,采用产生式:<表达式> -> <因子> <项>
<表达式> 遇到了 ID,采用产生式:<表达式> -> <因子> <项>
<表达式> 遇到了 INT_VALUE,采用产生式:<表达式> -> <因子> <项>
<赋值函数> 遇到了 ++,采用产生式:<赋值函数> -> <自增减运算符> <变量> ;
<赋值函数> 遇到了 --,采用产生式:<赋值函数> -> <自增减运算符> <变量> ;
<赋值函数> 遇到了 ID,采用产生式:<赋值函数> -> <变量> <赋值或函数调用>
<赋值函数> 遇到了 int,采用产生式:<赋值函数> -> <类型> <变量> <赋值或函数调用>
<赋值函数> 遇到了 real,采用产生式:<赋值函数> -> <类型> <变量> <赋值或函数调用>
<赋值或函数调用> 遇到了 %=,采用产生式:<赋值或函数调用> -> %= <右值> ;
<赋值或函数调用> 遇到了 (,采用产生式:<赋值或函数调用> -> ( <参数列表> ) ;
<赋值或函数调用> 遇到了 *=,采用产生式:<赋值或函数调用> -> *= <右值> ;
<赋值或函数调用> 遇到了 ++,采用产生式:<赋值或函数调用> -> <自增减运算符> ;
<赋值或函数调用> 遇到了 +=,采用产生式:<赋值或函数调用> -> += <右值> ;
<赋值或函数调用> 遇到了 --,采用产生式:<赋值或函数调用> -> <自增减运算符> ;
<赋值或函数调用> 遇到了 -=,采用产生式:<赋值或函数调用> -> -= <右值> ;
<赋值或函数调用> 遇到了 /=,采用产生式:<赋值或函数调用> -> /= <右值> ;
<赋值或函数调用> 遇到了 =,采用产生式:<赋值或函数调用> -> = <右值> ;
<赋初值> 遇到了 ),采用产生式:<赋初值> -> $
<赋初值> 遇到了 ,,采用产生式:<赋初值> -> $
<赋初值> 遇到了 ;,采用产生式:<赋初值> -> $
<赋初值> 遇到了 =,采用产生式:<赋初值> -> = <右值>
<逻辑表达式> 遇到了 %,采用产生式:<逻辑表达式> -> <表达式> <逻辑运算符> <表达式>
<逻辑表达式> 遇到了 (,采用产生式:<逻辑表达式> -> <表达式> <逻辑运算符> <表达式>
<逻辑表达式> 遇到了 *,采用产生式:<逻辑表达式> -> <表达式> <逻辑运算符> <表达式>
<逻辑表达式> 遇到了 +,采用产生式:<逻辑表达式> -> <表达式> <逻辑运算符> <表达式>
<逻辑表达式> 遇到了 ++,采用产生式:<逻辑表达式> -> <表达式> <逻辑运算符> <表达式>
<逻辑表达式> 遇到了 -,采用产生式:<逻辑表达式> -> <表达式> <逻辑运算符> <表达式>
<逻辑表达式> 遇到了 --,采用产生式:<逻辑表达式> -> <表达式> <逻辑运算符> <表达式>
<逻辑表达式> 遇到了 /,采用产生式:<逻辑表达式> -> <表达式> <逻辑运算符> <表达式>
<逻辑表达式> 遇到了 <,采用产生式:<逻辑表达式> -> <表达式> <逻辑运算符> <表达式>
<逻辑表达式> 遇到了 <=,采用产生式:<逻辑表达式> -> <表达式> <逻辑运算符> <表达式>
<逻辑表达式> 遇到了 <>,采用产生式:<逻辑表达式> -> <表达式> <逻辑运算符> <表达式>
<逻辑表达式> 遇到了 ==,采用产生式:<逻辑表达式> -> <表达式> <逻辑运算符> <表达式>
<逻辑表达式> 遇到了 >,采用产生式:<逻辑表达式> -> <表达式> <逻辑运算符> <表达式>
<逻辑表达式> 遇到了 >=,采用产生式:<逻辑表达式> -> <表达式> <逻辑运算符> <表达式>
<逻辑表达式> 遇到了 FLOAT_VALUE,采用产生式:<逻辑表达式> -> <表达式> <逻辑运算符> <表达式>
<逻辑表达式> 遇到了 ID,采用产生式:<逻辑表达式> -> <表达式> <逻辑运算符> <表达式>
<逻辑表达式> 遇到了 INT_VALUE,采用产生式:<逻辑表达式> -> <表达式> <逻辑运算符> <表达式>
<逻辑运算符> 遇到了 <,采用产生式:<逻辑运算符> -> <
<逻辑运算符> 遇到了 <=,采用产生式:<逻辑运算符> -> <=
<逻辑运算符> 遇到了 <>,采用产生式:<逻辑运算符> -> <>
<逻辑运算符> 遇到了 ==,采用产生式:<逻辑运算符> -> ==
<逻辑运算符> 遇到了 >,采用产生式:<逻辑运算符> -> >
<逻辑运算符> 遇到了 >=,采用产生式:<逻辑运算符> -> >=
<项> 遇到了 ),采用产生式:<项> -> $
<项> 遇到了 +,采用产生式:<项> -> + <因子> <项>
<项> 遇到了 ,,采用产生式:<项> -> $
<项> 遇到了 -,采用产生式:<项> -> - <因子> <项>
<项> 遇到了 ;,采用产生式:<项> -> $
<项> 遇到了 <,采用产生式:<项> -> $
<项> 遇到了 <=,采用产生式:<项> -> $
<项> 遇到了 <>,采用产生式:<项> -> $
<项> 遇到了 ==,采用产生式:<项> -> $
<项> 遇到了 >,采用产生式:<项> -> $
<项> 遇到了 >=,采用产生式:<项> -> $



